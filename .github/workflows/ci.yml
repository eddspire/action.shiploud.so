name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linter
        run: npm run lint
      
      - name: Run tests
        run: npm test
      
      - name: Build action
        run: npm run build
      
      - name: Check dist/
        run: |
          if ! git diff --quiet --ignore-space-at-eol -- dist/; then
            echo "Detected uncommitted changes after build. See status below:"
            git diff
            exit 1
          fi

  release:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build action
        run: npm run build
      
      - name: Check if release is needed
        id: check-release
        run: |
          # Only create release if this commit contains meaningful changes
          if git log --oneline -1 | grep -E "(feat|fix|perf|BREAKING)" || git log --oneline -1 | grep -i "release"; then
            echo "needs_release=true" >> $GITHUB_OUTPUT
          else
            echo "needs_release=false" >> $GITHUB_OUTPUT
            echo "No release needed - commit doesn't contain features, fixes, or release keywords"
          fi
      
      - name: Create Release
        if: steps.check-release.outputs.needs_release == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          VERSION=$(npm version patch -m "Release %s")
          git push origin main
          git push origin $VERSION
          gh release create $VERSION --title "Release $VERSION" --notes "Automated release $VERSION" 